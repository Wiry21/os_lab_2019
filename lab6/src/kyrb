client.c
Kurban
23 May at 9:04 pm
#include <stdbool.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <unistd.h> 

#include <errno.h> 
#include <getopt.h> 
#include <netdb.h> 
#include <netinet/in.h> 
#include <netinet/ip.h> 
#include <sys/socket.h> 
#include <sys/types.h> 

#include "multmod.h" 

struct Server { 
char ip[255]; 
int port; 
}; 

uint64_t total = 1; 

#define mem_block_size 4 

int recog(char* buff, uint32_t* pos, struct Server* to) 
{ 
char* temp = buff; 
uint32_t offset = 0; 
for(int j = 0; j < 3; j++) 
for(int i = 0; i < 4; i++) 
{ 
if((*(temp + offset) >= '0') && (*(temp + offset) <= '9')) 
{ 
offset++; 
continue; 
} 
if(*(temp + offset) == '.') 
{ 
offset++; 
break; 
} 
return 1; 

} 
for(int i = 0; i < 4; i++) 
{ 
if((*(temp + offset) >= '0') && (*(temp + offset) <= '9')) 
{ 
offset++; 
continue; 
} 
if(*(temp + offset) == ':') break; 
return 1; 
} 
memcpy(&to->ip, temp, offset); 
to->ip[offset] = '\0'; 
offset++; 
temp += offset; 
*pos += offset; 
offset = 0; 
while((*(temp + offset) >= '0') && (*(temp + offset) <= '9')) 
offset++; 
if((*(temp + offset) != '\n') && (*(temp + offset) != ' ')) 
return 1; 
temp[offset] = '\0'; 
to->port = atoi(temp); 
*pos += offset; 
return 0; 
} 

bool ConvertStringToUI64(const char *str, uint64_t *val) { 
char *end = NULL; 
unsigned long long i = strtoull(str, &end, 10); 
if (errno == ERANGE) { 
fprintf(stderr, "Out of uint64_t range: %s\n", str); 
return false; 
} 

if (errno != 0) 
return false; 

*val = i; 
return true; 
} 

int main(int argc, char **argv) { 
uint64_t k = -1; 
uint64_t mod = -1; 
char servers[255] = {'\0'}; 

while (true) { 
int current_optind = optind ? optind : 1; 

static struct option options[] = {{"k", required_argument, 0, 0}, 
{"mod", required_argument, 0, 0}, 
{"servers", required_argument, 0, 0}, 
{0, 0, 0, 0}}; 

int option_index = 0; 
int c = getopt_long(argc, argv, "", options, &option_index); 

if (c == -1) 
break; 

switch (c) { 
case 0: { 
switch (option_index) { 
case 0: 
ConvertStringToUI64(optarg, &k); 
// TODO: your code here 
if(k == 0) 
k = -1; 
break; 
case 1: 
ConvertStringToUI64(optarg, &mod); 
// TODO: your code here 
break; 
case 2: 
// TODO: your code here 
memcpy(servers, optarg, strlen(optarg)); 
break; 
default: 
printf("Index %d is out of options\n", option_index); 
} 
} break; 

case '?': 
printf("Arguments error\n"); 
break; 
default: 
fprintf(stderr, "getopt returned character code 0%o?\n", c); 
} 
} 

if (k == -1 || mod == -1 || !strlen(servers)) { 
fprintf(stderr, "Using: %s —k 1000 —mod 5 —servers /path/to/file\n", 
argv[0]); 
return 1; 
} 

// TODO: for one server here, rewrite with servers from file 
//unsigned int servers_num = 1; 

FILE* f = fopen(servers, "rb"); 
if(!f) 
{ 
printf("server file error!\n"); 
return 1; 
} 

struct Server *to = malloc(sizeof(struct Server) * mem_block_size); 
// TODO: delete this and parallel work between servers 

uint32_t pos = 0; 
char buff[24]; 
uint32_t mem_serv_counter = 1; 
uint32_t nserv = 0; 
while(!feof(f) || (nserv > k)) 
{ 
if(nserv == (mem_block_size*mem_serv_counter)) 
{ 
mem_serv_counter++; 
to = (struct Server *) realloc(to, mem_block_size*mem_serv_counter*sizeof(struct Server)); 
} 
fseek(f, pos, SEEK_SET); 
if(fread(&buff, 1, 24, f) == 0) 
{ 
printf("rw file error!\n"); 
fclose(f); 
return 1; 
} 
if(recog(buff, &pos, to + nserv)) 
{ 
fclose(f); 
printf("file format error!\n"); 
return 1; 
} 
pos++; 
nserv++; 
} 
fclose(f); 
to = (struct Server *) realloc(to, nserv*sizeof(struct Server)); 

// TODO: work continiously, rewrite to make parallel 
for (int i = 0; i < nserv; i++) { 
struct hostent *hostname = gethostbyname(to[i].ip); 
if (hostname == NULL) { 
fprintf(stderr, "gethostbyname failed with %s\n", to[i].ip); 
exit(1); 
} 

struct sockaddr_in server; 
server.sin_family = AF_INET; 
server.sin_port = htons(to[i].port);
Kurban
23 May at 9:04 pm
server.sin_addr.s_addr = *((unsigned long *)hostname->h_addr); 

int sck = socket(AF_INET, SOCK_STREAM, 0); 
if (sck < 0) { 
fprintf(stderr, "Socket creation failed!\n"); 
exit(1); 
} 

if (connect(sck, (struct sockaddr *)&server, sizeof(server)) < 0) { 
fprintf(stderr, "Connection failed\n"); 
exit(1); 
} 

// TODO: for one server 
// parallel between servers 
uint64_t begin = i*k/nserv + 1; 
uint64_t end = (i == (nserv-1)) ? k + 1 : (i+1)*k/nserv + 1; 

memcpy(buff, &begin, sizeof(uint64_t)); 
memcpy(buff + sizeof(uint64_t), &end, sizeof(uint64_t)); 
memcpy(buff + 2 * sizeof(uint64_t), &mod, sizeof(uint64_t)); 

if (send(sck, buff, 3 * sizeof(uint64_t), 0) < 0) { 
fprintf(stderr, "Send failed\n"); 
exit(1); 
} 

uint64_t answer = 0; 
if (recv(sck, (char*)&answer, sizeof(answer), 0) < 0) { 
fprintf(stderr, "Recieve failed\n"); 
exit(1); 
} 

// TODO: from one server 
// unite results 
//memcpy(&answer, response, sizeof(uint64_t)); 
total = MultModulo(total, answer, mod); 
close(sck); 
} 
printf("answer: %llu\n", total); 
free(to); 
remove(servers); 

return 0; 
}
Kurban
23 May at 9:05 pm
multmod.c
Kurban
23 May at 9:05 pm
#include "multmod.h" 
uint64_t MultModulo(uint64_t a, uint64_t b, uint64_t mod) { 
uint64_t result = 0; 
a = a % mod; 
while (b > 0) { 
if (b % 2 == 1) 
result = (result + a) % mod; 
a = (a * 2) % mod; 
b /= 2; 
} 
return result % mod; 
}
Kurban
23 May at 9:06 pm
multmod.h
Kurban
23 May at 9:06 pm
#include <stdint.h> 
uint64_t MultModulo(uint64_t a, uint64_t b, uint64_t mod);
Kurban
23 May at 9:06 pm
server.h
Kurban
23 May at 9:06 pm
#include <limits.h> 
#include <stdbool.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <unistd.h> 

#include <getopt.h> 
#include <netinet/in.h> 
#include <netinet/ip.h> 
#include <sys/socket.h> 
#include <sys/types.h> 

#include "pthread.h" 
#include "multmod.h" 

struct FactorialArgs { 
uint64_t begin; 
uint64_t end; 
uint64_t mod; 
}; 


uint64_t Factorial(const struct FactorialArgs *args) { 
uint64_t ans = 1; 

// TODO: your code here 
for(uint64_t i = args->begin; i < args->end; i++) 
ans = MultModulo(ans, i, args->mod); 

return ans; 
} 

void *ThreadFactorial(void *args) { 
struct FactorialArgs *fargs = (struct FactorialArgs *)args; 
return (void *)(uint64_t *)Factorial(fargs); 
} 

int main(int argc, char **argv) { 
int tnum = -1; 
int port = -1; 
char servers[255] = {'\0'}; 

while (true) { 
int current_optind = optind ? optind : 1; 

static struct option options[] = {{"port", required_argument, 0, 0}, 
{"tnum", required_argument, 0, 0}, 
{"servers", required_argument, 0, 0}, 
{0, 0, 0, 0}}; 

int option_index = 0; 
int c = getopt_long(argc, argv, "", options, &option_index); 

if (c == -1) 
break; 

switch (c) { 
case 0: { 
switch (option_index) { 
case 0: 
port = atoi(optarg); 
// TODO: your code here 
break; 
case 1: 
tnum = atoi(optarg); 
// TODO: your code here 
if(tnum < 1) 
tnum = -1; 
break; 
case 2: 
// TODO: your code here 
memcpy(servers, optarg, strlen(optarg)); 
break; 
default: 
printf("Index %d is out of options\n", option_index); 
} 
} break; 

case '?': 
printf("Unknown argument\n"); 
break; 
default: 
fprintf(stderr, "getopt returned character code 0%o?\n", c); 
} 
} 

if (port == -1 || tnum == -1) { 
fprintf(stderr, "Using: %s —port 20001 —tnum 4\n", argv[0]); 
return 1; 
} 

int server_fd = socket(AF_INET, SOCK_STREAM, 0); 
if (server_fd < 0) { 
fprintf(stderr, "Can not create server socket!"); 
return 1; 
} 

FILE* f = fopen(servers, "ab"); 
flockfile(f); 
fprintf(f, "%s:%i\n", "127.0.0.1", port); 
printf("%s:%i\n", "127.0.0.1", port); 
funlockfile(f); 
fclose(f); 

struct sockaddr_in server; 
server.sin_family = AF_INET; 
server.sin_port = htons((uint16_t)port); 
server.sin_addr.s_addr = htonl(INADDR_ANY); 

int opt_val = 1; 
setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt_val, sizeof(opt_val)); 

int err = bind(server_fd, (struct sockaddr *)&server, sizeof(server)); 
if (err < 0) { 
fprintf(stderr, "Can not bind to socket!"); 
return 1; 
} 

err = listen(server_fd, 128); 
if (err < 0) { 
fprintf(stderr, "Could not listen on socket\n"); 
return 1; 
} 

printf("Server listening at %d\n", port); 

while (true) { 
//printf("123\n"); 
struct sockaddr_in client; 
socklen_t client_len = sizeof(client); 
int client_fd = accept(server_fd, (struct sockaddr *)&client, &client_len); 

if (client_fd < 0) { 
fprintf(stderr, "Could not establish new connection\n"); 
continue; 
} 

while (true) { 
//printf("456\n"); 
unsigned int buffer_size = sizeof(uint64_t) * 3; 
char from_client[buffer_size]; 
int read = recv(client_fd, from_client, buffer_size, 0); 

if (!read) 
break; 
if (read < 0) { 
fprintf(stderr, "Client read failed\n"); 
break; 
} 
if (read < buffer_size) { 
fprintf(stderr, "Client send wrong data format\n"); 
break; 
} 

pthread_t threads[tnum]; 

uint64_t begin = 0; 
uint64_t end = 0; 
uint64_t mod = 0; 
memcpy(&begin, from_client, sizeof(uint64_t)); 
memcpy(&end, from_client + sizeof(uint64_t), sizeof(uint64_t)); 
memcpy(&mod, from_client + 2 * sizeof(uint64_t), sizeof(uint64_t)); 

fprintf(stdout, "Receive: %llu %llu %llu\n", begin, end, mod); 

uint64_t dx = (end - begin)/tnum; 

struct FactorialArgs args[tnum]; 
for (uint32_t i = 0; i < tnum; i++) { 
// TODO: parallel somehow 
args[i].begin = begin + i*dx; 
args[i].end = (i == (tnum - 1)) ? end : begin + (i+1)*dx; 
args[i].mod = mod; 

if (pthread_create(&threads[i], NULL, ThreadFactorial, 
(void *)&args[i])) { 
printf("Error: pthread_create
Kurban
23 May at 9:06 pm
failed!\n"); 
return 1; 
} 
} 

uint64_t total = 1; 
for (uint32_t i = 0; i < tnum; i++) { 
uint64_t result = 0; 
pthread_join(threads[i], (void **)&result); 
total = MultModulo(total, result, mod); 
} 

printf("%llu, %llu; Total: %llu\n", begin, end, total); 

char buffer[sizeof(total)]; 
memcpy(buffer, &total, sizeof(total)); 
err = send(client_fd, buffer, sizeof(total), 0); 
if (err < 0) { 
fprintf(stderr, "Can't send data to client\n"); 
break; 
} 
} 

shutdown(client_fd, SHUT_RDWR); 
close(client_fd); 
} 

return 0; 
}